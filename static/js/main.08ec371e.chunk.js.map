{"version":3,"sources":["fonts/chawp.regular.ttf","fonts/ChelseaMarket-Regular.ttf","fonts/Lobster-Regular.ttf","Countdown.tsx","Letters.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Countdown","props","timeBetween","moment","duration","end","diff","now","isRowBreakNeeded","years","months","weeks","days","outputTime","reachCounter","hours","minutes","seconds","useEffect","reached","className","Letters","stringToWrite","businessDiff","length","slice","console","log","App","useState","currentDate","setCurrentDate","config","currentYearStart","toDate","setToDate","reachCount","setReachCount","setTimeout","style","backgroundColor","height","width","currentYearEnd","nextYearStart","nextYearEnd","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+VAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,mD,gBCA3CD,EAAOC,QAAU,IAA0B,6C,+FC6C5BC,EAnCG,SAACC,GACf,IAAMC,EAA+BC,IAAOC,SAASH,EAAMI,IAAIC,KAAKL,EAAMM,MACpEC,EAAmBN,EAAYO,SAAWP,EAAYQ,UAAYR,EAAYS,SAAWT,EAAYU,OAEvGC,EAAa,8BACXZ,EAAMa,aAAe,IAAO,EAAI,0DAAyB,8BAAe,0DAAsB,8BAC/FZ,EAAYO,QAAU,EAAIP,EAAYO,QAAU,WAAU,GAC1DP,EAAYQ,SAAW,EAAIR,EAAYQ,SAAW,cAAa,GAC/DR,EAAYS,QAAU,EAAIT,EAAYS,QAAU,YAAW,GAC3DT,EAAYU,OAAS,EAAI,EAAKV,EAAYU,OAAS,EAAK,QAAU,GAClEJ,EAAmB,6BAAQ,GAC3BN,EAAYa,QAAU,EAAIb,EAAYa,QAAU,YAAW,GAC3Db,EAAYc,UAAY,GAAK,IAAMd,EAAYc,UAAY,UAAYd,EAAYc,UAAY,UAC/Fd,EAAYe,UAAY,GAAK,IAAMf,EAAYe,UAAY,gBAAef,EAAYe,UAAY,iBAevG,OAZAC,qBAAU,YACFhB,EAAYe,UAAY,GACxBf,EAAYc,UAAY,GACxBd,EAAYa,QAAU,GACtBb,EAAYU,OAAS,GACrBV,EAAYS,QAAU,GACtBT,EAAYQ,SAAW,GACvBR,EAAYO,QAAU,IACtBR,EAAMkB,aAKV,yBAAKC,UAAU,aACVP,I,uBCfEQ,EAjBC,SAACpB,GACb,IACIqB,EAAc,GACZpB,EAA+BC,IAAOC,SAASH,EAAMI,IAAIkB,aAAatB,EAAMM,KAAM,KAOxF,OALIL,EAAYU,QAJG,iBAIkBY,SACjCF,EALe,iBAKYG,MAAMvB,EAAYU,QAC7Cc,QAAQC,IANO,iBAMQH,OAAStB,EAAYU,SAI5C,yBAAKQ,UAAU,WACVE,ICuBEM,EApCH,WAAO,IAAD,EACwBC,mBAAwB1B,OADhD,mBACP2B,EADO,KACMC,EADN,OAEcF,mBAAwB1B,IAAO6B,EAAOC,mBAFpD,mBAEPC,EAFO,KAECC,EAFD,OAGoBN,mBAAiB,GAHrC,mBAGTO,EAHS,KAGGC,EAHH,KAKdnB,qBAAU,WACNoB,YAAW,WACPP,EAAe5B,SAChB,QAkBP,OACI,0BAAMoC,MAAO,CAACC,gBAAiB,UAAWC,OAAQ,QAASC,MAAO,UAC9D,kBAAC,EAAD,CAAWnC,IAAKuB,EAAazB,IAAK6B,EAAQf,QAjBlC,WACZ,OAAQiB,GACJ,KAAK,EACDD,EAAUhC,IAAO6B,EAAOW,iBACxB,MACJ,KAAK,EACDR,EAAUhC,IAAO6B,EAAOY,gBACxB,MACJ,KAAK,EACDT,EAAUhC,IAAO6B,EAAOa,cAGhCR,EAAcD,EAAW,IAKuCtB,aAAcsB,IACxEA,EAAa,IAAO,EAAI,kBAAC,EAAD,CAAS7B,IAAKuB,EAAazB,IAAK6B,IAAY,GAEtE,gFAAyC,uBAAGY,KAAK,eAAR,aAAzC,OC1BQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,wBCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.08ec371e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chawp.regular.1c03ed6d.ttf\";","module.exports = __webpack_public_path__ + \"static/media/ChelseaMarket-Regular.405f23af.ttf\";","module.exports = __webpack_public_path__ + \"static/media/Lobster-Regular.9406d0ab.ttf\";","import React, {useEffect} from 'react';\nimport moment from \"moment\";\n\ninterface Props {\n    now: moment.Moment,\n    end: moment.Moment,\n    reached: () => void,\n    reachCounter: number\n}\n\nconst Countdown = (props: Props) => {\n    const timeBetween: moment.Duration = moment.duration(props.end.diff(props.now));\n    const isRowBreakNeeded = timeBetween.years() || timeBetween.months() || timeBetween.weeks() || timeBetween.days();\n\n    let outputTime = <span>\n        {(props.reachCounter % 2) === 0 ? <span>A tanév kezdetéig: <br/></span> : <span>A tanév végéig: <br/></span>}\n        {timeBetween.years() > 0 ? timeBetween.years() + \" év, \" : \"\"}\n        {timeBetween.months() > 0 ? timeBetween.months() + \" hónap, \" : \"\"}\n        {timeBetween.weeks() > 0 ? timeBetween.weeks() + \" hét, \" : \"\"}\n        {timeBetween.days() % 7 > 0 ? (timeBetween.days() % 7) + \" nap \" : \"\"}\n        {isRowBreakNeeded ? <br/> : \"\"}\n        {timeBetween.hours() > 0 ? timeBetween.hours() + \" óra, \" : \"\"}\n        {timeBetween.minutes() < 10 ? \"0\" + timeBetween.minutes() + \" perc, \" : timeBetween.minutes() + \" perc, \"}\n        {timeBetween.seconds() < 10 ? \"0\" + timeBetween.seconds() + \" másodperc\" : timeBetween.seconds() + \" másodperc\"}\n    </span>;\n\n    useEffect(() => {\n        if (timeBetween.seconds() < 0 ||\n            timeBetween.minutes() < 0 ||\n            timeBetween.hours() < 0 ||\n            timeBetween.days() < 0 ||\n            timeBetween.weeks() < 0 ||\n            timeBetween.months() < 0 ||\n            timeBetween.years() < 0){\n            props.reached();\n        }\n    })\n\n    return (\n        <div className=\"countDown\">\n            {outputTime}\n        </div>\n    );\n};\n\nexport default Countdown;","import React from 'react';\nimport moment from \"moment-business-days\";\n\ninterface Props {\n    now: moment.Moment,\n    end: moment.Moment\n}\n\nconst Letters = (props: Props) => {\n    const fullString = \"VAKÁCIÓ!\";\n    let stringToWrite=\"\";\n    const timeBetween: moment.Duration = moment.duration(props.end.businessDiff(props.now), \"d\")\n\n    if (timeBetween.days() <= fullString.length){\n        stringToWrite = fullString.slice(timeBetween.days());\n        console.log(fullString.length - timeBetween.days());\n    }\n\n    return (\n        <div className=\"letters\">\n            {stringToWrite}\n        </div>\n    );\n};\n\nexport default Letters;","import React, {useEffect, useState} from 'react';\nimport moment from \"moment\";\nimport Countdown from \"./Countdown\";\nimport config from \"./config.json\";\nimport Letters from './Letters';\n\n\nconst App = () => {\n    const [currentDate, setCurrentDate] = useState<moment.Moment>(moment());\n    const [toDate, setToDate] = useState<moment.Moment>(moment(config.currentYearStart));\n    let [reachCount, setReachCount] = useState<number>(0);\n\n    useEffect(() => {\n        setTimeout(() => {\n            setCurrentDate(moment());\n        }, 1000);\n    })\n\n    const reached = () => {\n        switch (reachCount) {\n            case 0:\n                setToDate(moment(config.currentYearEnd));\n                break;\n            case 1:\n                setToDate(moment(config.nextYearStart));\n                break;\n            case 2:\n                setToDate(moment(config.nextYearEnd));\n                break;\n        }\n        setReachCount(reachCount+1);\n    }\n\n    return (\n        <main style={{backgroundColor: \"#59dc11\", height: \"100vh\", width: \"100vw\"}}>\n            <Countdown now={currentDate} end={toDate} reached={reached} reachCounter={reachCount} />\n            {(reachCount % 2) !== 0 ? <Letters now={currentDate} end={toDate}/> : \"\"}\n\n            <footer>Az oldal elkészültét támogatta a <a href=\"//hazizz.hu\">Házizz</a>!</footer>\n        </main>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./style.css\";\nimport './fonts/chawp.regular.ttf';\nimport './fonts/ChelseaMarket-Regular.ttf';\nimport './fonts/Lobster-Regular.ttf';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}